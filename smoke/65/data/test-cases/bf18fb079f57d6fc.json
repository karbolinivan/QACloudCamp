{"uid":"bf18fb079f57d6fc","name":"Delete resource","fullName":"tests.test_resource.TestResource#test_delete_resource","historyId":"fdf6794000c393c9939dd22f32eac1ac","time":{"start":1695344386257,"stop":1695344386323,"duration":66},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.11/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>cloudflare</center>\\r\\n</body>\\r\\n</html>\\r\\n'\ncls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n../local/lib/python3.11/json/__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa8d82ec9d0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>cloudflare</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n_w = <built-in method match of re.Pattern object at 0x7fa8d3cfa0c0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n../local/lib/python3.11/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa8d82ec9d0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>cloudflare</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.11/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_resource.TestResource object at 0x7fa8d28975d0>\ncreate_data = <Response [201]>\n\n    @pytest.mark.smoke\n    @allure.title('Delete resource')\n    def test_delete_resource(self, create_data):\n        id_test = create_data.json()['id']\n>       response = delete_resource(id_test)\n\ntests/test_resource.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/api.py:24: in delete_resource\n    result = Requests().delete(url)\nbase/methods.py:29: in delete\n    logs.save_response(response=result)\nutils/logger.py:57: in save_response\n    f'\\njson: {json.dumps(response.json(), indent=2)}\\n'\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.11/site-packages/requests/models.py:975: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1695344374797,"stop":1695344374822,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"create_data","time":{"start":1695344383830,"stop":1695344386257,"duration":2427},"status":"passed","steps":[{"name":"Create a resource","time":{"start":1695344383831,"stop":1695344386257,"duration":2426},"status":"passed","steps":[{"name":"POST request to 'https://jsonplaceholder.typicode.com/posts'","time":{"start":1695344383831,"stop":1695344386257,"duration":2426},"status":"passed","steps":[],"attachments":[{"uid":"4cad99009498ddcd","name":"Logs","source":"4cad99009498ddcd.txt","type":"text/plain","size":547}],"parameters":[{"name":"url","value":"'https://jsonplaceholder.typicode.com/posts'"},{"name":"body","value":"{'title': 'Final street dark maintain shake expect college worry student blood.', 'body': 'Everything loss exactly remain.', 'userId': 6}"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[{"name":"body","value":"{'title': 'Final street dark maintain shake expect college worry student blood.', 'body': 'Everything loss exactly remain.', 'userId': 6}"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":1,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true}],"testStage":{"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n../local/lib/python3.11/site-packages/requests/models.py:971: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>cloudflare</center>\\r\\n</body>\\r\\n</html>\\r\\n'\ncls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\n../local/lib/python3.11/json/__init__.py:346: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa8d82ec9d0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>cloudflare</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n_w = <built-in method match of re.Pattern object at 0x7fa8d3cfa0c0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\n../local/lib/python3.11/json/decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fa8d82ec9d0>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>cloudflare</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.11/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_resource.TestResource object at 0x7fa8d28975d0>\ncreate_data = <Response [201]>\n\n    @pytest.mark.smoke\n    @allure.title('Delete resource')\n    def test_delete_resource(self, create_data):\n        id_test = create_data.json()['id']\n>       response = delete_resource(id_test)\n\ntests/test_resource.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/api.py:24: in delete_resource\n    result = Requests().delete(url)\nbase/methods.py:29: in delete\n    logs.save_response(response=result)\nutils/logger.py:57: in save_response\n    f'\\njson: {json.dumps(response.json(), indent=2)}\\n'\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n../local/lib/python3.11/site-packages/requests/models.py:975: JSONDecodeError","steps":[{"name":"Delete a resource with id \"101\"","time":{"start":1695344386258,"stop":1695344386322,"duration":64},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","statusTrace":"  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/project/base/api.py\", line 24, in delete_resource\n    result = Requests().delete(url)\n             ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/project/base/methods.py\", line 29, in delete\n    logs.save_response(response=result)\n  File \"/usr/project/utils/logger.py\", line 57, in save_response\n    f'\\njson: {json.dumps(response.json(), indent=2)}\\n'\n                          ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n","steps":[{"name":"DELETE request to 'https://jsonplaceholder.typicode.com/posts/101'","time":{"start":1695344386258,"stop":1695344386320,"duration":62},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n","statusTrace":"  File \"/usr/local/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/project/base/methods.py\", line 29, in delete\n    logs.save_response(response=result)\n  File \"/usr/project/utils/logger.py\", line 57, in save_response\n    f'\\njson: {json.dumps(response.json(), indent=2)}\\n'\n                          ^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.11/site-packages/requests/models.py\", line 975, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n","steps":[],"attachments":[],"parameters":[{"name":"url","value":"'https://jsonplaceholder.typicode.com/posts/101'"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[{"name":"id_resource","value":"101"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"Resource"},{"name":"story","value":"Resource API"},{"name":"tag","value":"smoke"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_resource"},{"name":"subSuite","value":"TestResource"},{"name":"host","value":"169c2c1fdb17"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_resource"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":59,"unknown":0,"total":60},"items":[{"uid":"33238c0ec94735b5","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/64//#testresult/33238c0ec94735b5","status":"passed","time":{"start":1695257921078,"stop":1695257921204,"duration":126}},{"uid":"1152348a6e21d1e0","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/63//#testresult/1152348a6e21d1e0","status":"passed","time":{"start":1695171548521,"stop":1695171548704,"duration":183}},{"uid":"612abe227f3de257","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/62//#testresult/612abe227f3de257","status":"passed","time":{"start":1695085175438,"stop":1695085175623,"duration":185}},{"uid":"1897febbf557ef51","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/61//#testresult/1897febbf557ef51","status":"passed","time":{"start":1694998749770,"stop":1694998749924,"duration":154}},{"uid":"24d3f535e77a2991","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/60//#testresult/24d3f535e77a2991","status":"passed","time":{"start":1694912517860,"stop":1694912517932,"duration":72}},{"uid":"3d1bd23e069f90bd","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/59//#testresult/3d1bd23e069f90bd","status":"passed","time":{"start":1694825865168,"stop":1694825865343,"duration":175}},{"uid":"e40627caa0d61768","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/58//#testresult/e40627caa0d61768","status":"passed","time":{"start":1694739580192,"stop":1694739580368,"duration":176}},{"uid":"f0385b78a2ed3d","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/57//#testresult/f0385b78a2ed3d","status":"passed","time":{"start":1694653092916,"stop":1694653092991,"duration":75}},{"uid":"d255ef8f3c4f4594","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/56//#testresult/d255ef8f3c4f4594","status":"passed","time":{"start":1694566770540,"stop":1694566770628,"duration":88}},{"uid":"875f9a46764886e1","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/55//#testresult/875f9a46764886e1","status":"passed","time":{"start":1694480221787,"stop":1694480221852,"duration":65}},{"uid":"79ee9d5dfa1bf77f","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/54//#testresult/79ee9d5dfa1bf77f","status":"passed","time":{"start":1694393937031,"stop":1694393937166,"duration":135}},{"uid":"5be2c82615646cbe","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/53//#testresult/5be2c82615646cbe","status":"passed","time":{"start":1694307702985,"stop":1694307703034,"duration":49}},{"uid":"1a3f7a17f3222878","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/52//#testresult/1a3f7a17f3222878","status":"passed","time":{"start":1694221011181,"stop":1694221011264,"duration":83}},{"uid":"29def7f3e43b3008","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/51//#testresult/29def7f3e43b3008","status":"passed","time":{"start":1694134698187,"stop":1694134698265,"duration":78}},{"uid":"3c079e82b305e2aa","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/50//#testresult/3c079e82b305e2aa","status":"passed","time":{"start":1694048294702,"stop":1694048294871,"duration":169}},{"uid":"7b35feffa1d818a0","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/49//#testresult/7b35feffa1d818a0","status":"passed","time":{"start":1693961914800,"stop":1693961914883,"duration":83}},{"uid":"b39d35857f56f6f5","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/48//#testresult/b39d35857f56f6f5","status":"passed","time":{"start":1693875462022,"stop":1693875462167,"duration":145}},{"uid":"6d826dad88612d43","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/47//#testresult/6d826dad88612d43","status":"passed","time":{"start":1693789179119,"stop":1693789179316,"duration":197}},{"uid":"e269381d38c85a0f","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/46//#testresult/e269381d38c85a0f","status":"passed","time":{"start":1693702895544,"stop":1693702895602,"duration":58}},{"uid":"d4d0edb72baa8940","reportUrl":"https://karbolinivan.github.io/QACloudCamp/smoke/45//#testresult/d4d0edb72baa8940","status":"passed","time":{"start":1693616177250,"stop":1693616177289,"duration":39}}]},"tags":["smoke"]},"source":"bf18fb079f57d6fc.json","parameterValues":[]}